todoに書かれている作業を実行し、完了したアイテムはdoneセクションの最後に移動してください。

# todo: これからやること


# pending: 保留（指示がない限り実行しない）


# done: 既に完了したこと
- `Example`という名のリポジトリがあるとき、`git clone git@localhost:git/Example.git`でクローンできるようにしました。これに対応し、リポジトリ詳細ページのリポジトリ情報のフレーム内にクローンを行うためのボタンを実装してください。例では`localhost`としていますが、実際のデプロイ先では変わる可能性があるため、ホスト名を変数に保持して、変更できるようにしてください。
- はい。しかし今試してみたところ、リポジトリ詳細ページにクローンボタンが表示されないようです。確認してください。
- クローンボタンが表示されなかったもうひとつの原因として、`<script src="/static/js/repository.js"></script>`で読み込まれるはずのファイルがキャッシュされており、最新のファイルを取得できていなかった可能性があります。これを回避する対策はありますか？
- リポジトリ情報フレーム内の`名前`と`最終コミット`は左寄せにしてください。
- リポジトリを作成する機能を追加してください。
- Gitリポジトリの場所 `/mnt/git` がソースコード内の複数の場所にハードコーディングされています。定義を一箇所にしてください。
- 作成直後でコミットが1件もないリポジトリ見ると、ファイル一覧に`hooks/`, `info/`, `objects/`, `config`, `description`, `HEAD`のように、ベアリポジトリの中が丸見えになっています。コミットが1件もないときはその旨を表示してください。
- `chmod 000`されたディレクトリが一つでもあると`リポジトリ一覧の取得に失敗しました`というエラーになりますので、改めて、読み書きできないリポジトリを表示から除外する機能を実装してください。
- リポジトリの削除機能を実装してください。
- リポジトリ情報フレーム内に`リポジトリの削除`ボタンを追加
- 確認画面を表示
- 本当に完全削除するのではなく、以下2点を実行して、読み書きできないようにします。
- リポジトリのパスが `/mnt/git/MyProject.git` なら `/mnt/git/MyProject.git.deleted` に変更します。
- このディレクトリを読み書きできないようにします。（例： `chmod 000 /mnt/git/MyProject.git.deleted`）
- リポジトリの削除ボタンを押しても確認ダイアログが表示されません。chromeとedgeとfirefoxで同じ症状です。確認してください
- リポジトリ削除処理が 500 Internal Server Error になります。リポジトリ削除のAPIはDELETEメソッドではなくPOSTメソッドを使用してください。
- サーバー側で余計な`.git`を削除することで正常に動作するようになりました。しかし念のため、クライアント側がリクエストを送信する時にも不要な`.git`を付けないようにすることはできますか？
- 正常な動作を確認しました。デバッグ用 console.log を削除してください。
- spec.txtを更新してください
- プロジェクト名を`GitView`から`Guilty`に変更します。
- 各ページの`<title>`にこの名前を入れてください。
- 実行ファイル名は全部小文字の`guilty`とします。
- systemdでデーモン化するための `guilty.service` を生成してください。プログラムのパスは `/usr/local/bin/guilty` にインストールされている想定です。 
- Makefileやspec.txtも更新してください。
- このプロジェクトの概要を説明する`README.md`を英語で生成してください。
- 冒頭に作業中（wip）であることを書き添えてください。
- コードのほとんどを GitHub Copilot Agent と Claude 3.7 Sonnet で生成したことを記載してください。
- 削除したリポジトリは `/mnt/git/MyProject.git.deleted` にリネームされますが、その状況で同名のリポジトリを作り、さらにそれを削除しようとした時、「既に削除済みのリポジトリがある場合は、それを先に完全に削除」しようとしますが、そのときのファイル権限が 000 であるため、削除が失敗します。完全に削除する前に `chmod 777` 等にしておく必要があると思います。
- このプログラムを実行するにあたって、ローカルアカウント `git` が存在することが前提となっています（`useradd git`）
- しかし、システムによっては、既に`git`アカウントが存在していて、`useradd`ができないことがあり、その場合は必要に応じてホームディレクトリ`/home/git`を作成してから`/etc/passwd`を編集して、`git`アカウントのためのホームディレクトリを設定する必要があるかもしれません。
- そして外部から接続して、このサーバーのリポジトリにアクセスするためには、`/home/git/git`を読み書きできる必要があります（`cd /home/git && ln -s /mnt/git git`）
- これらのことをREADME.mdに英語で記載してください。
- 作成直後でコミットが1件もないリポジトリ見ると、ファイル一覧に`hooks/`, `info/`, `objects/`, `config`, `description`, `HEAD`のように、ベアリポジトリの中が丸見えになっています。コミットが1件もないときはその旨を表示してください。
- `chmod 000`されたディレクトリが一つでもあると`リポジトリ一覧の取得に失敗しました`というエラーになりますので、改めて、読み書きできないリポジトリを表示から除外する機能を実装してください。
- リポジトリの削除機能を実装してください。
- リポジトリ情報フレーム内に`リポジトリの削除`ボタンを追加
- 確認画面を表示
- 本当に完全削除するのではなく、以下2点を実行して、読み書きできないようにします。
- リポジトリのパスが `/mnt/git/MyProject.git` なら `/mnt/git/MyProject.git.deleted` に変更します。
- このディレクトリを読み書きできないようにします。（例： `chmod 000 /mnt/git/MyProject.git.deleted`）
- リポジトリの削除ボタンを押しても確認ダイアログが表示されません。chromeとedgeとfirefoxで同じ症状です。確認してください
- リポジトリ削除処理が 500 Internal Server Error になります。リポジトリ削除のAPIはDELETEメソッドではなくPOSTメソッドを使用してください。
- サーバー側で余計な`.git`を削除することで正常に動作するようになりました。しかし念のため、クライアント側がリクエストを送信する時にも不要な`.git`を付けないようにすることはできますか？
- 正常な動作を確認しました。デバッグ用 console.log を削除してください。
- spec.txtを更新してください
- プロジェクト名を`GitView`から`Guilty`に変更します。
- 各ページの`<title>`にこの名前を入れてください。
- 実行ファイル名は全部小文字の`guilty`とします。
- systemdでデーモン化するための `guilty.service` を生成してください。プログラムのパスは `/usr/local/bin/guilty` にインストールされている想定です。 
- Makefileやspec.txtも更新してください。
- このプロジェクトの概要を説明する`README.md`を英語で生成してください。
- 冒頭に作業中（wip）であることを書き添えてください。
- コードのほとんどを GitHub Copilot Agent と Claude 3.7 Sonnet で生成したことを記載してください。
- 削除したリポジトリは `/mnt/git/MyProject.git.deleted` にリネームされますが、その状況で同名のリポジトリを作り、さらにそれを削除しようとした時、「既に削除済みのリポジトリがある場合は、それを先に完全に削除」しようとしますが、そのときのファイル権限が 000 であるため、削除が失敗します。完全に削除する前に `chmod 777` 等にしておく必要があると思います。
- このプログラムを実行するにあたって、ローカルアカウント `git` が存在することが前提となっています（`useradd git`）
- しかし、システムによっては、既に`git`アカウントが存在していて、`useradd`ができないことがあり、その場合は必要に応じてホームディレクトリ`/home/git`を作成してから`/etc/passwd`を編集して、`git`アカウントのためのホームディレクトリを設定する必要があるかもしれません。
- そして外部から接続して、このサーバーのリポジトリにアクセスするためには、`/home/git/git`を読み書きできる必要があります（`cd /home/git && ln -s /mnt/git git`）
- これらのことをREADME.mdに英語で記載してください。
- `getGitRepositories()`関数で、`filepath.WalkDir`の代わりに`os.ReadDir`を使用してください。
- シンボリックリンクがディレクトリを指しているときは、それもディレクトリであるとみなしてください。
- グループ機能を実装します。`GitRepositoryHome`が指すディレクトリを1階層だけ検索し、見つかったサブディレクトリがグループです。
- リポジトリ一覧の画面に、グループ選択のためのドロップダウンリストを追加してください。
- グループが変更されたら、リポジトリ一覧を更新してください。
- `getGroupList`関数の中でディレクトリを検索している処理は`getDirectories`関数と似ています。可能であれば、`getGroupList`関数の中から`getDirectories`関数を呼び出すようにしてください。
- グループ名で使用できる記号は`-`と`_`のみとします。それ以外の記号が含まれる場合はグループから除外してください。
- ブラックリスト方式で、グループから除外する名前を正規表現で追加できるようにしてください。
- `git-shell-commands`という名前はグループから除外してください。
- `groupName + " グループにあるGitリポジトリ一覧"`で表示されるグループ名が、最新のグループ名と連動していないようです。適切に更新されるようにしてください。
- リポジトリ詳細のページで、サブディレクトリへの移動とファイルの内容の取得機能が、グループ機能に対応できていないようです。修正してください。
- デフォルト以外のグループが選択されている状態で新規リポジトリを作成しようとした時、選択されているグループではなく、デフォルトグループ内に作成されてしまいます。選択されているグループ内に新規リポジトリを作成するように修正してください。
- 新規リポジトリの作成ページに遷移した時、トップページで選択されていたグループ名を引き継いで、グループ名のドロップダウンリストを選択状態にしてください。
