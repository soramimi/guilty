# GitView アプリケーション仕様書

## 1. 概要

GitViewは、リモートGitリポジトリを閲覧するためのWebベースのアプリケーションです。ユーザーは複数のGitリポジトリの一覧表示、リポジトリ内のファイル閲覧、コミット履歴の確認などが可能です。主にベアリポジトリの表示を想定していますが、通常のGitリポジトリにも対応しています。

## 2. システム構成

### バックエンド
- 言語: Go言語
- Webサーバー: 標準のhttpパッケージを使用
- 外部依存: gitコマンドライン

### フロントエンド
- フレームワーク: Vue.js
- CSSフレームワーク: Bootstrap
- HTTPクライアント: Axios

## 3. アプリケーション構造

```
gitview/
  ├── main.go             # メインのGoプログラム（バックエンドAPI）
  ├── go.mod              # Goモジュール定義
  ├── Makefile            # ビルド設定
  ├── static/             # 静的ファイル
  │   ├── css/
  │   │   └── style.css   # カスタムCSSスタイル
  │   ├── js/
  │   │   ├── app.js      # メインページVueアプリ
  │   │   ├── main.js     # 共通JavaScript
  │   │   └── repository.js # リポジトリ詳細ページVueアプリ
  │   └── lib/            # 外部ライブラリ
  │       ├── bootstrap/  # Bootstrapライブラリ
  │       ├── vue/        # Vue.jsライブラリ
  │       └── axios/      # Axiosライブラリ
  └── templates/          # HTMLテンプレート
      ├── index.html      # メインページのテンプレート
      └── repository.html # リポジトリ詳細ページのテンプレート
```

## 4. 主要な機能

### 4.1 リポジトリリスト表示
- 指定ディレクトリ（デフォルトは`/mnt/git`）にあるGitリポジトリの一覧表示
- リポジトリ名、パス、最終コミット情報の表示
- 最終コミット日時順のソート（新しい順）
- リポジトリ名や内容による検索フィルタリング

### 4.2 リポジトリ詳細表示
- リポジトリの基本情報表示（名前、最終コミット情報）
- ファイル・ディレクトリツリーの表示と閲覧
- ディレクトリ間のナビゲーション（パンくずリスト対応）
- ファイル名による検索フィルタリング

### 4.3 ファイル内容表示
- テキストファイルの内容をモーダルウィンドウで表示
- バイナリファイルの判定と表示制限
- ファイルサイズと最終更新日時の表示

### 4.4 その他機能
- リポジトリの種類判定（通常/ベア）
- ブランチとタグのリスト取得（APIレベルで対応）

## 5. API仕様

### 5.1 `/api/repositories`
- **メソッド**: GET
- **説明**: すべてのGitリポジトリのリストを返す
- **レスポンス**: GitRepositoryオブジェクトの配列

### 5.2 `/api/repository/{path}`
- **メソッド**: GET
- **説明**: 指定したリポジトリの詳細情報を返す
- **パラメータ**: `path` - リポジトリのパス（URLエンコード）
- **レスポンス**: RepositoryDetailsオブジェクト（リポジトリ情報、ファイル一覧、ブランチ、タグ）

### 5.3 `/api/directory/{repoPath}/{dirPath}`
- **メソッド**: GET
- **説明**: 指定したディレクトリ内のファイルとサブディレクトリのリストを返す
- **パラメータ**: 
  - `repoPath` - リポジトリのパス（URLエンコード）
  - `dirPath` - ディレクトリのパス（URLエンコード）
- **レスポンス**: GitFileオブジェクトの配列

### 5.4 `/api/file/{repoPath}/{filePath}`
- **メソッド**: GET
- **説明**: 指定したファイルの内容を返す
- **パラメータ**: 
  - `repoPath` - リポジトリのパス（URLエンコード）
  - `filePath` - ファイルのパス（URLエンコード）
- **レスポンス**: ファイルの内容とバイナリかどうかのフラグ

## 6. データモデル

### 6.1 GitRepository
- `path`: リポジトリのパス
- `name`: リポジトリの名前
- `type`: リポジトリの種類（"normal" または "bare"）
- `lastCommit`: 最新のコミット情報（CommitInfo）

### 6.2 CommitInfo
- `author`: コミット作者の名前
- `date`: コミット日時
- `message`: コミットメッセージ

### 6.3 GitFile
- `name`: ファイル名
- `path`: ファイルのパス
- `type`: ファイルの種類（"file" または "dir"）
- `size`: ファイルサイズ（バイト単位）
- `lastModified`: 最終更新日時

### 6.4 RepositoryDetails
- `repository`: GitRepositoryオブジェクト
- `files`: GitFileオブジェクトの配列
- `branches`: ブランチ名の配列
- `tags`: タグ名の配列

## 7. UIコンポーネント

### 7.1 リポジトリリスト（app.js）
- リポジトリ一覧表示テーブル
- 検索フィルターボックス
- リポジトリエントリコンポーネント

### 7.2 リポジトリ詳細（repository.js）
- リポジトリ情報カード
- ファイル一覧テーブル
- パンくずリストナビゲーション
- ファイル内容モーダル表示
- 検索フィルターボックス

## 8. セキュリティ対策

- パス走査攻撃防止機能（ディレクトリトラバーサル対策）
- クロスオリジンリソース共有（CORS）対応
- エラーメッセージの適切な処理

## 9. 制限事項

- デフォルトでは `/mnt/git` ディレクトリのみをスキャン
- バイナリファイルの内容は表示不可
- 大規模なリポジトリやファイルのパフォーマンス最適化は未実装
- 複雑なGit操作（コミット、プッシュなど）は未対応

## 10. 将来的な拡張可能性

- ユーザー認証・認可機能
- コミット履歴の詳細表示
- ファイル差分（diff）の表示
- ブランチ間の比較機能
- アクセス制限・権限管理